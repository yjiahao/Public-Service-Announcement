from app import app
from flask import request, abort, render_template, url_for

import pandas as pd

from sentence_transformers import SentenceTransformer

# load pretrained encoding model, takes a while to load
model = SentenceTransformer('all-MiniLM-L6-v2')

# load dataset: should contain the embeddings generated by the model on the job description
jobs = pd.read_csv("data/new_job_descriptions.csv")

# test route for home
@app.route("/", methods = ["GET", "POST"])
def home():
    # if user is accessing the page directly
    if request.method == "GET":
        # return render_template("index.html"): supposed to render the html template here with the forms and everything
        return render_template("index.html")
    # elif user submits the form on the page
    elif request.method == "POST":
        # create vector embeddings of the sentences user types in, then perform vector search here as well
        # arrange the rows and return top k relevant results
        interests = request.args.get("interest")
        skills = request.args.get("skills")
        certs = request.args.get("certifications")
        jobhist = request.args.get("job_history")
        psa_courses = request.args.get("psa_courses")

        # combine into one sentence before encoding
        sentence = f'''

        Interests: {interests},
        Skills: {skills},
        Certifications: {certs},
        Job History: {jobhist},
        PSA courses taken: {psa_courses}

        '''
        
        embeddings = model.encode([sentence])

        # compute cosine similarity, then add as a new column into pandas, rearrange by the cosine similarity

        # reranking done here
        # return render_template("index.html", embeddings = embeddings)
        return "Under development"
    else:
        # otherwise, if request is not GET/POST
        abort(400, description="Request method not supported")